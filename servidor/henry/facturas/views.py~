# Create your views here.
from facturas.forms import *
from main.models import UserJava
from main.views import my_login_required
from main.helper import render_form
from main.models import *
from datetime import date
from facturas.models import *
from productos.models import *
from productos.views import generar_ingreso_page

from django.db import IntegrityError, transaction
from django.template import Context, loader, RequestContext
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render_to_response, redirect
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User, UserManager
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.forms import AuthenticationForm, PasswordChangeForm
from django.contrib.auth.decorators import user_passes_test

import functools
import decimal

#Resumen de venta, la ventana de busqueda
@my_login_required
@user_passes_test(hasNivel(1), '/r/login')
def resumen_request_page(request):
    #make an empty form
    form = ResumenForm(initial={'desde' : date.today(), 'hasta' : date.today()})
    meta = {'method' : 'get',
            'form' : form,
            'st_message' : '',
            'action' : reverse('facturas.views.generar_resumen_page'),
            'submit_name' : 'Buscar',
            'title' : 'Resumen de Venta',
           }

    return render_form(meta, RequestContext(request))

#parse the request and generate the resume de venta
@my_login_required
@user_passes_test(hasNivel(1), '/r/login')
def generar_resumen_page(request):
    #necesita privilegio para ver resumen
    form = ResumenForm(request.GET)

    if not form.is_valid():
        form = ResumenForm(initial={'desde' : date.today(), 'hasta' : date.today()})
        meta = {'method' : 'get',
                'form' : form,
                'st_message' : 'Datos invalidos',
                'action' : reverse('facturas.views.generar_resumen'),
                'submit_name' : 'Buscar',
                'title' : 'Resumen de Venta',
               }
        return render_form(meta, RequestContext(request))

    desde = form.cleaned_data['desde']
    hasta = form.cleaned_data['hasta']
    vendido = form.cleaned_data['vendido_por']
    bodega_id = int(form.cleaned_data['bodega'])
    bodega_name = Bodega.objects.get(id=bodega_id)
    resumen = OrdenDeDespacho.objects.filter(fecha__range=(desde, hasta),
                                             vendedor=UserJava(username=vendido),
                                             bodega=Bodega(bodega_id))
    validos = resumen.filter(eliminado=False)
    borrados = list(resumen.filter(eliminado=True))
    cheques = list(validos.filter(pago=OrdenDeDespacho.PAGO_CHEQUE))
    efectivos = list(validos.filter(pago=OrdenDeDespacho.PAGO_EFECTIVO))
    targetas = list(validos.filter(pago=OrdenDeDespacho.PAGO_TARGETA))

    cheque_total = sum([c.total for c in cheques])
    efectivo_total = sum([c.total for c in efectivos])
    targeta_total = sum([c.total for c in targetas])
    btotal = sum([c.total for c in borrados])

    return render_to_response('resumen.html',
                             {'cheques' : cheques,
                              'bodega' : bodega_name,
                              'efectivos' : efectivos,
                              'targetas' : targetas,
                              'ctotal' : cheque_total,
                              'etotal' : efectivo_total,
                              'ttotal' : targeta_total,
                              'borrados' : borrados,
                              'btotal' : btotal,
                          })



@my_login_required
#esto es para eliminar factura!
def testPage(request):
    meta = {'method' : 'post',
            'form' : None,
            'st_message' : '',
            'action' : reverse('facturas.views.testPage'),
            'submit_name' : 'Eliminar',
            'title' : 'Eliminar Factura',
           }
    if request.method == 'GET':
        meta['form'] = EliminarForm()
        return render_form(meta, RequestContext(request))

    form = EliminarForm(request.POST)
    if not form.is_valid():
        meta['form'] = form
        return render_form(meta, RequestContext(request))

    user = request.user
    codigo = form.cleaned_data['no_de_factura']
    motivo = form.cleaned_data['motivo']

#hacer un record
    desp = OrdenDeDespacho.objects.get(codigo=codigo)
    bodega = desp.bodega
    record = OrdenEliminado(codigo=desp,
                            motivo=motivo,
                            eliminado_por=user)

#devolver marcaderia
    items = ItemDeDespacho.objects.filter(desp_cod=desp)
    for item in items:
        cont = Contenido.objects.get(prod=item.producto, bodega=bodega)
        cont.cant += item.cantidad
        cont.save()
#insertar record
    record.save()
#mark the factura
    desp.eliminado = True
    desp.save()

    meta['form'] = EliminarForm()
    meta['st_message'] = 'Factura <b> %s </b> eliminado con exito' % codigo
    return render_form(meta, RequestContext(request))


def validar_egreso_page(request):
    meta = {'method' : 'post',
            'form' : None,
            'st_message' : '',
            'action' : reverse('facturas.views.testPage'),
            'submit_name' : 'Eliminar',
            'title' : 'Eliminar Factura',
           }

    if request.method == 'GET':
        meta['form'] = CodigoForm()
        return render_form(meta, RequestContext(request))

    form = CodigoForm(request.POST)
    if not form.is_valid():
        meta['form'] = form
        return render_form(meta, RequestContext(request))

    codigo = form.cleaned_data['codigo']
    bodega = form.cleaned_data['bodega']

    try:
        egreso = Egreso(codigo_id=codigo,
                        ingresado_por=request.user,
                        bodega_id=bodega)
        egreso.save()
    except IntegrityError:
        meta['st_message'] = 'Egreso %d no existe o ya ha sido validado, revise el numero' % codigo
        return render_form(meta, RequestContext(request))

    #hacer el egreso
    for item in egreso.items:
        cont = Contenido.objects.get(bodega_id=bodega, prod_id=item.producto_id)
        cont.cant -= items.cantidad
        cont.save()

    meta['st_message'] = 'Egreso %d validado' % codigo
    return render_form(meta, RequestContext(request))


def ver_doc_page(request):
    form = VerDocForm()
    meta = {'method' : 'get',
            'form' : form,
            'st_message' : '',
            'action' : reverse('facturas.views.show_doc_page'),
            'submit_name' : 'Ver',
            'title' : 'Ver Documentos',
           }
    return render_form(meta, None)

def show_doc_page(request):
    form = VerDocForm(request.GET)

    if not form.is_valid():
        return ver_doc_page(request)

    bodega = Bodega(int(form.cleaned_data['bodega']))
    codigo = form.cleaned_data['codigo']
    tipo = form.cleaned_data['tipo']
    funcs = {'nota' : functools.partial(ver_factura, nota=True),
             'factura' :functools.partial(ver_factura, nota=False),
             'ingreso' : lambda bodega,codigo : generar_ingreso_page(Ingreso.objects.get(id=codigo))}
    return funcs[tipo](bodega, codigo)


class item:
    def __init__(self, cod, nombre, cant, precio):
        self.cod = cod
        self.nombre = nombre
        self.cant = cant
        self.precio = precio

    @property
    def subtotal(self):
        return self.cant * self.precio

def ver_factura(bodega, codigo, nota):
    decimal.getcontext().prec = 2
    decimal.getcontext().rounding = decimal.ROUND_HALF_UP

    factura = None
    items_factura = None

    if nota:
        factura = NotaDeVenta.objects.get(id=codigo)
        items_factura = ItemDeVenta.objects.filter(venta_cod=factura).order_by('num')
    else:
        factura = OrdenDeDespacho.objects.get(codigo=codigo, bodega=bodega)
        items_factura = ItemDeDespacho.objects.filter(desp_cod=factura).order_by('num')


    items = [ item(i.producto.codigo, i.producto.nombre, i.cantidad, i.precio) \
            for i in items_factura]

    total = functools.reduce(lambda ac, it : ac + it.subtotal, items, 0)
    return render_to_response('ver_factura.html', {'factura' : factura,
                                                   'items' : items,
                                                   'total' : total,
                                                   'is_nota' : nota})





